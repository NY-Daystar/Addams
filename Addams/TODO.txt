// TODO feature choose-playlist : finir le choix des playlist à exporter

// TODO utiliser l'extension re-sharper pour les tests

// TODO feature public-export : ajouter deux type d'export
	- l'export privé celui qu'on a actuellement
	- et un export public en transmettant une url sans authentification requise
	- Pour ça faire une Interface IExporter avec une classe Export qui implemente une méthode exportPrivate et une exportPublic

// TODO gerer le OAUTH2 
	- tester le projet Dev/WebApiAuth avec l'url 
	- localhost:8888/login avec le bon clientId et clientSecret
	- demander à chatGPT pour faire une autorisaction code flow en c# sur spotify pour l'oauth2
	- tester la classe ProgrammeNEW pour le nouveau TOKEN pour ca voir les reponses de chatGPT avec l'authorization code
	- il faut suivre ce guide qui demande une authorisation de fou : https://developer.spotify.com/documentation/general/guides/authorization/code-flow/
	- detecter l'obsolescence du token OAUTH2 et le regenerer puis le sauvegarder dauns un fichier de config dans APPDATA
	- Regarder ce code pour avoirr let token: https://github.com/watsonbox/exportify/blob/d1247f715df1932ccc389364bffdb2f95d8d4bcb/src/components/Login.jsx
	- Recuperer l'expiration qui est de 3600s et mettre du coup la date d'expiration en config et ne pas refresh si la date n'est pas atteinte

// TODO feature youtube
	- Utilisé l'api de youtube pour faire 

// TODO feature autoupdate : mettre en place un autoupdate d'exe

// TODO tests unitaires
	- Faire des objets MOQ en utilisant ces exemples : https://openclassrooms.com/fr/courses/5641591-testez-votre-application-c/5696246-utilisez-le-framework-de-simulacre-moq

// TODO bugfix: Ajout fichier manquant
/// Ajouter le  .nuget avec la lib Nlog
// TODO ajouter la licence et le README
// Les assemblyInfo et les packages.config

// TODO feature setup-app : faire un setup d'option au lancement de l'application
//- 1 - lancement du program pour l'export
//- 2 - Show configuration file
//      - Afficher le path
//      - Afficher la config
//- 3 - Modifier configuration file
//          - Afficher la config
//          - Rappeler le setup pour réecrire les value et reset le token
//- 4 - Show log file
//    - Afficher le path des logs
//    - Afficher les 50 derniers logs

// TODO Faire un installeur setup pour executable
	- https://gaby277.developpez.com/Tutoriels/VisualStudioInstallerProject/
	- https://learn.microsoft.com/fr-fr/windows/msix/app-installer/create-appinstallerfile-vs


// TODO feature import : faire la classe SpotifyImport
	- En gros on prend un csv via un fileExplorer
	- On deserialize pour avoir une playlist
	- On demande un nom a la nouvelle playlist
	- On fait un call api pour ajouter soit la playlist d'un coup soit les pistes 1 par 1
	- Faire un test avec les piste liked en creant une playlist du nom de "RR" avec

// TODO creer un installer wizard comme pour le projet Ânkh : https://github.com/NY-Daystar/Ankh

Release-1 :
// TODO voir pour le run code analysis -> click droit sur la solution Run code analysis on solution
// TODO configure code analysis : Analyze > Configure code analysis
// TODO setup un msi package pour une install propre etc...
// TODO setup un autoupdater avec la release github

// TODO faire un github action pour lancer les tests unitaires
// TODO sonarCube pour l'analyse de code
// TODO ajouter du multilangue avec un fichier Resx
// TODO faire des tests unitaires
// TODO try catch sur les exceptions

Release-2 :
- Faire une appli windows form pour avoir une vue graphique
	- tab Vue Export playlist
	- tab Vue configuration

Release 3:
- Avoir la possibilite de charger un csv ou plusieur pour voir la playlist
- Ajout de la fonctionnalité de crée une playlist - Vue créer playlist


// TODO a tester D:\Dev\Workspace-Golang - A METTRE SUR GITHUB\update-golang

// TODO tester Workspace-Python

//////////////////////////////////////////////////////////////////////////////////////////////////////////////


- On a enregistré une application pour utiliser l'api spotify
	- Lien pour enregistrer l'application: https://developer.spotify.com/dashboard/applications
	- On peut ensuite generer un token oauth2 avec ces infos pour obtenir un token: https://www.youtube.com/watch?v=N34BM2CU_3g
	- Il faudra dans le code faire ça pour recuperer le token: https://developer.spotify.com/documentation/general/guides/authorization/client-credentials/
	- Pour l'appel WEBS voir postman avec la liste des appels
- Exporter mes playlist Spotify en csv 
- puis voir pour l'automatiser régulièrement (appel DLL via script bash)
- https://soundiiz.com/fr/tutorial/export-spotify-to-text
- Faire le README: avec la description de ce qu'il y a faire https://developer.spotify.com/dashboard/applications
- Voir exemple de code C# sur github pour voir la structure
	- README + CHANGELOG
		- README AVEC LA VERSION
	- GITHUB ACTION
- V1 avec juste la ligne de commande qui demande le token qui le save dans un fichier json et qui execute les api pour sauvegarder le fichier
	- Si token invalide ou non existant on demande d'en régénérer un
	- Mettre les steps de géneration du token avec ouverture du navigateur par defaut du user sur les bonne page spotify
	- Ouverture de postman également
	- Faire un executable portable dans GIT
- V2 qui génère le token si il n'existe pas, verification du token dans le cas 
	- Voir comment on fait un appel OAUTH2 en C# pour generer le token spotify
	- Save les infos client id et autre dans le json
	- Faire exe portable spotify et un setup
- V3 - interface graphique

